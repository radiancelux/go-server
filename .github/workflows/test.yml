name: Test Suite

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]
  schedule:
    - cron: "0 2 * * *" # Run daily at 2 AM

jobs:
  test:
    name: Test Suite
    runs-on: ubuntu-latest

    strategy:
      matrix:
        go-version: [1.21, 1.22, 1.23]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: ${{ matrix.go-version }}

      - name: Cache Go modules
        uses: actions/cache@v3
        with:
          path: ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-

      - name: Install dependencies
        run: go mod download

      - name: Run linting
        run: |
          go vet ./...
          go fmt -d .

      - name: Run unit tests
        run: go test ./internal/... -v

      - name: Run integration tests
        run: go test ./test -v -run TestServer

      - name: Run end-to-end tests
        run: go test ./test -v -run TestHealthEndpoint -run TestAPIEndpoint -run TestVersionEndpoint -run TestMetricsEndpoint -run TestCORSEndpoint -run TestRequestSizeLimit

      - name: Run performance tests
        run: go test ./test -v -run TestLoadTest -run TestMemoryUsage

      - name: Run benchmarks
        run: go test ./test -bench=. -benchmem

      - name: Generate coverage report
        run: |
          go test ./... -cover -coverprofile=coverage.out
          go tool cover -html=coverage.out -o coverage.html

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage.out
          flags: unittests
          name: codecov-umbrella

      - name: Upload test results
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: test-results-go-${{ matrix.go-version }}
          path: |
            coverage.out
            coverage.html

  build:
    name: Build
    runs-on: ubuntu-latest
    needs: [test]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: 1.23

      - name: Build for Linux
        run: |
          GOOS=linux GOARCH=amd64 go build -o bin/go-server-linux-amd64 main.go

      - name: Build for Windows
        run: |
          GOOS=windows GOARCH=amd64 go build -o bin/go-server-windows-amd64.exe main.go

      - name: Build for macOS
        run: |
          GOOS=darwin GOARCH=amd64 go build -o bin/go-server-darwin-amd64 main.go

      - name: Upload build artifacts
        uses: actions/upload-artifact@v3
        with:
          name: go-server-binaries
          path: bin/

  docker:
    name: Docker Build
    runs-on: ubuntu-latest
    needs: [test]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: false
          tags: go-server:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Test Docker image
        run: |
          docker run --rm -d -p 8080:8080 --name go-server-test go-server:latest
          sleep 5
          curl -f http://localhost:8080/health || exit 1
          docker stop go-server-test
